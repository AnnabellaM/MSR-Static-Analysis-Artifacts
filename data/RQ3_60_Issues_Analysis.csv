ID,Group,Topic,Final 5 Examples,Problem,Root Cause ,Response Type,Response
1,Static Analysis Tasks,Type Inference,https://github.com/phpstan/phpstan/issues/12254,"The analyzer infers return type posix_getpwnam() too broadly as array<string, mixed>, rather than a precisely typed array, knowing uid+gid are integers and the rest are strings. ","Analyzer (e.g., PHPStan) relies on an internal function map to understand the return types of built-in functions. Certain functions are missing from the reflection metadata",Update/Fix in source code,Update the return type to a precise shape in the function map file.
2,Static Analysis Tasks,Type Inference,https://github.com/phpstan/phpstan/issues/7061,"The analyzer infer different return type of the method when a class implements built-in interfaces (e.g., ArrayAccess) from the return type declared in documentation.",Analyzer ignores the return type declared in documentation but conservatively falls back to the more general type when no native return type is declared in the source code,Workaround solution,"Add attribute (e.g., #[\ReturnTypeWillChange]) in the source code of target program to suppress compatibility warnings."
3,Static Analysis Tasks,Type Inference,https://github.com/phpstan/phpstan/issues/5068,Analyzer fails to catch type precision mismatch. This can lead to undetected runtime bugs.,"Analyzer allows a more general type (e.g., mixed[]) to be passed into parameters expecting a narrower, more specific type (e.g., int[]).",Existing solution,Enable configuration to treat types precision comparison more strictly. 
4,Static Analysis Tasks,Type Inference,https://github.com/phpstan/phpstan/issues/6861,"Analyzer cannot recognize certain built-in types correctly (e.g., mixed type in PHP) ","Type hints are interpreted as a class Name or as a built-in Identifier depending on language version (e.g., int is treated as a class name on PHP 5.6 and as a built-in on PHP 7.0.)",Update/Fix in dependency,"Upgraded parser to support version-dependent type resolution.
The limitation is not from the tool's logic, but from third-party dependencies."
5,Static Analysis Tasks,Type Inference,https://github.com/phpstan/phpstan/issues/10312,Analyzer reports an unused type should be removed from the return type when using constant enumerations.,N/A,Invalid issue,"It is correct to suggest narrowing the type to reflect actual behavior, this improves precision and prevents false assumptions."
6,Tool Capabilities,Unexpected Results,https://github.com/phpstan/phpstan/issues/2825,"Analyzer cannot infer the type of a variable after an instanceof check,  if that check is done via a function/method call.","Analyzer does not analyze the internal logic (like instanceof) of called functions or methods. It only considers annotations, parameter and return type hints. ",No fix,Currently not supported by the analyzer.
7,Tool Capabilities,Unexpected Results,https://github.com/phpstan/phpstan/issues/3677,Analyzer fails in type inference when checking multiple variables in a conditional.,Analyzer does not fully analyze the logical structure of compound boolean expressions.,Update/Fix in source code,N/A
8,Tool Capabilities,Unexpected Results,https://github.com/phpstan/phpstan/issues/8371,"Analyzer assumes a method always returns the same value, thus report a false positive.",N/A,Workaround solution,Add annotation (@phpstan-impure) to the method.
9,Tool Capabilities,Unexpected Results,https://github.com/phpstan/phpstan/issues/9882,"Analyzer assumes a method always returns the same value, thus report a false positive.",Analyzer caches return values of functions by default even they aren’t explicitly marked @phpstan-pure.,Workaround solution,Add annotation (@phpstan-impure) to the method. Or enable configuration (rememberPossiblyImpureFunctionValues: false) to treat all unannotated funtions as possibly impure.
10,Tool Capabilities,Unexpected Results,https://github.com/phpstan/phpstan/issues/6245,Analyzer cannot identify the enum declaration with the new language syntax in PHP 8.1. ,Not yet implemented the support for new language syntax.,Update/Fix in source code,Added new feature.
11,Language Features,Array Handling,https://github.com/phpstan/phpstan/issues/6625,"Analyzer fails to detect that array values have been type-checked within a loop when accessed by key. As a result, it continues to report type-related issues for those values, despite the explicit checks.",N/A,Workaround solution,The maintainer suggested modifying the target code.
12,Language Features,Array Handling,https://github.com/phpstan/phpstan/issues/8528,Analyzer doesn't understand type narrowing in array filter callable.,"Analyzer does not analyze the internals of callables, does not trace type assertions through method references.",Workaround solution,Updated user code to use an inline anonymous function instead of a method reference.
13,Language Features,Array Handling,https://github.com/phpstan/phpstan/issues/3132,Analyzer doesn't recognize keys of array. It thinks the code is filtering by array values of type object while the filtering is done by its keys of type string. ,"Analyzer doesn’t track the third argument to array_filter() (ARRAY_FILTER_USE_KEY), so it misunderstood the array key as an object.",Update/Fix in source code,Added support for the ARRAY_FILTER_USE_KEY
14,Language Features,Array Handling,https://github.com/phpstan/phpstan/issues/1940,Analyzer does not track changes such as new keys added during iteration when modifying an array by reference during a foreach loop.,Analyzer does not model reference assignments precisely enough in array loops.,Update/Fix in source code,N/A
15,Language Features,Array Handling,https://github.com/phpstan/phpstan/issues/8632,Type inforamtion is lost during arrage merge.,Analyzer loses the specific shape information and falls back to a generalized union type.,Update/Fix in source code,N/A
16,Build Issues,Build System,https://github.com/facebook/infer/issues/855,"The Gradle integration produces a malformed javac command where required options like -sourcepath are included without corresponding values, causing subsequent flags to be misinterpreted and compilation to fail.",The Gradle integration produces a malformed javac command where required options like -sourcepath are included without corresponding values. ,Update/Fix in source code,"Developed a Gradle plugin that generates a compilation database (e.g., compile_commands.json) and extended Infer to consume this format for non-C languages like Java. This approach would decouple analyzer from specific build tools and offer a more consistent integration path, similar to how many C/C++ tools use compilation databases."
17,Build Issues,Build System,https://github.com/facebook/infer/issues/1030,Analyzer fails to build,Newer javalib versions are incompatible with analyzer's current build scripts. ,Update/Fix in dependency,Downgrade javalib to an older version which analyzer is compatible with.
18,Build Issues,Build System,https://github.com/wala/WALA/pull/470,"Retiring the Maven build system would remove WALA’s only automated ECJ-based test, risking undetected Eclipse-specific build errors and compromising Eclipse compatibility.",Retiring the Maven build system removes WALA’s only automated ECJ-based test.,Update/Fix in dependency,"Supports optional ECJ compilation via javaCompiler=ecj in Gradle build. CI uses ECJ as a static check (like a linter), then switches back to javac to avoid ECJ-related test failures while preserving Eclipse compatibility."
19,Build Issues,Build System,https://github.com/pmd/pmd/issues/1560,"The user cannot use analyzer because it requires Maven to build, but network access is restricted, and everything must be built from source, including build tools like Maven itself.",Network access is restricted.,Invalid issue,"Managing Maven access indirectly (e.g., via mirrored repos) rather than removing the dependency entirely."
20,Build Issues,Build System,https://github.com/wala/WALA/issues/1260,Certain package is inacessible to client application.,"The com.ibm.wala.ide subproject was originally an OSGi component, relying on Eclipse’s p2 repositories to manage dependencies. When the OSGi metadata was removed, the build process wasn't updated to handle dependencies in a standard Maven/Gradle setup. As a result, the component is neither published to Maven nor bundled with its dependencies, making it unusable for consumers who expect standard dependency resolution.",Update/Fix in dependency,"Deploy the com.ibm.wala.ide subproject to Maven Central as a standard Maven artifact, and rely on Tycho or M2E to generate the required OSGi metadata automatically at build time. "
21,Tool Capabilities,Rule Definitions,https://github.com/pmd/pmd/issues/5222,Ruleset cannot be updated correctly. ,"When a ruleset references an existing rule and overrides a default property value, instead of just updating the property's value, it redefines the entire property, which violates the expected ruleset format.",Update/Fix in source code,N/A
22,Tool Capabilities,Rule Definitions,https://github.com/facebook/infer/issues/1554,Request for a customized rule to count how many times a function appears.,N/A,Invalid issue,"Analyzer is aimed at finding bugs in source code but is not designed to find the kind of metrics user is asked for. However, the tool can be ""abused"" to satisfy the user's requirement."
23,Tool Capabilities,Rule Definitions,https://github.com/secure-software-engineering/FlowDroid/issues/98,"Question regards how to tag specific data flows in static analysis with custom labels such as ""Sink"", ""Source"", ""Neither"", ""Both"", or domain-specific tags like ""SMS"" when detecting SMS-related leaks.",N/A,Existing solution,"Create customized implementation of the ISourceSinkManager interface, which fills the userDatafield of the SourceInfo object."
24,Tool Capabilities,Rule Definitions,https://github.com/phpstan/phpstan/issues/782,"Question regarding whether multiple static analysis rules that operate on the same AST node (e.g., Class_) should be implemented in a single class or separated into multiple rule classes.",N/A,Existing solution,"Good practice is to separate the rules into individual classes. This follows the Single Responsibility Principle, makes code more readable, easier to test and maintain, and allows enabling/disabling specific rules individually. It also avoids complex logic (e.g., instanceof) when applying rules to different node types."
25,Tool Capabilities,Rule Definitions,https://github.com/pmd/pmd/issues/2845,"Request for new rule to detect overly verbose array initialization, it's a code style rule that encourages using the shorter syntax in initializations.",N/A,Unknown,Result in a new code style rule being added.
26,Static Analysis Tasks,IR,https://github.com/soot-oss/soot/issues/1847,Jimple type assigner ignores debug type information provided in the LocalVariableTable although respective option is enabled. This impacts analyses that rely on preserving source variable names and types.,"The SharedInitializationLocalSplitter (SILS) phase in Soot was introduced to work around problems with the TypeAssigner struggling to assign valid types.The SharedInitializationLocalSplitter (SILS) phase in Soot introduces new temporary variables when splitting locals that are reused with incompatible types. This transformation disrupts the mapping between bytecode and original source variable names. As a result, even with jb.use-original-names:true, source variable names are lost or replaced by auto-generated stack variables.",Workaround solution,Disable or remove SILS altogether. The priority was that the TypeAssigner does not break.
27,Static Analysis Tasks,IR,https://github.com/soot-oss/SootUp/issues/942,"In older versions of Soot, nop (no-operation) statements are often used at the end of a trap range or to simplify certain analyses. However, these nop statements are treated as FallThroughStmt in SootUp, and they lack successors, causing SootUp to fail when building the control flow graph (CFG).","The nop statements are treated as FallThroughStmt in SootUp, and they lack successors. The number of successors no longer matches the expected CFG structure.",No fix,"1. Preserve the trap range mapping accurately.
2. Remove all JNop statements at the end of trap ranges, ensuring that the resulting Jimple code forms a valid CFG, where the number of successors for each statement matches the actual flow."
28,Static Analysis Tasks,IR,https://github.com/wala/WALA/issues/1099,Some information about statements on local variables in WALA's IR are missing.,N/A,Invalid issue,"WALA uses SSA (Static Single Assignment) form in its intermediate representation (IR), which automatically performs copy propagation during SSA construction. As a result, some assignments of constants or copies between local variables are eliminated from the IR. The IR focuses on semantically essential operations: method calls, pointer dereferences, and control flow. "
29,Static Analysis Tasks,IR,https://github.com/secure-software-engineering/phasar/issues/12,"In a PhASAR IFDS taint analysis, the user tried to generate a taint fact for a function argument in getCallFlowFunction, but the fact never appeared in the analysis results.",N/A,Existing solution,"PhASAR does not use getCallFlowFunction for declared-only functions (e.g., external/libc functions without a definition). Instead, it uses getSummaryFlowFunction. However, if external functions are not explicitly modeled in getSummaryFlowFunction(), getSummaryFlowFunction() returns nullptr, PhASAR assumes no summary is available for the declared-only function, so it falls back to getCallFlowFunction(), but because the function has no start points (i.e., no definition), any facts generated in getCallFlowFunction() are not merged, and the analysis effectively drops them. Therefore, taint facts added in getCallFlowFunction for such functions are ignored."
30,Static Analysis Tasks,IR,https://github.com/soot-oss/soot/issues/1186,"When transforming Java bytecode to Jimple using Soot, local variable names from the original source code are not preserved, and may be replaced by another local variable.","Locals are kept in some sort of cache which uses the local variable index as key. However, the Java compiler can reuse an index for another variable if scopes are disjoint. If Soot uses this  information without analyzing def-use chains, it may mistakenly treat different variables (that share the same slot index) as the same one. This can lead to incorrect merging of variables in the intermediate representation (IR), ultimately breaking the program's semantics. ",No fix,"1. Call LocalSplitter early in AsmMethodSource.getBody() and rename locals afterward using debug info if use-original-names:true is enabled. However, it will introduce redundency, LocalSplitter would run again during the Jimple transformation phase unless explicitly disabled.

2. Attach temporary tags (e.g., original names from LocalVariableTable) to variable definition statements. The LocalSplitter can then use these tags to name variables. But this way may add complexity due to managing temporary tags, which are not needed after transformation."
31,Build Issues,Compilation,https://github.com/facebook/infer/issues/1294,Error when building infer from source. The build script (./build-infer.sh clang) results in an error on Ubuntu 20.04,The issue is caused by an outdated dependency (facebook-clang-plugins) not by the tool itself.,Update/Fix in dependency,LLVM version of the dependency needs to be updated.
32,Build Issues,Compilation,https://github.com/facebook/infer/issues/634,Build script works for Java (./build-infer.sh java) but make test fails.,Makefile configuration bug: it should exclude non-Java tests but does not.,Update/Fix in source code,workflow is updated.
33,Build Issues,Compilation,https://github.com/facebook/infer/issues/335,Build fails for iOS project.,Because of an inconsistent behavior between Apple clang and open source clang.,Update/Fix in source code,"After a long discussion and lots of trying out alternative solutions, an inconsistency is found and fixed by setting an option flag."
34,Build Issues,Compilation,https://github.com/facebook/infer/issues/99,Compilation command fails when the path contains white spaces.,Incorrect handling of white spaces when parsing arguments.,Update/Fix in source code,The maintainers initially suggested to update Java version as a workaround but then fixed argument handling.
35,Build Issues,Compilation,https://github.com/facebook/infer/issues/30,Build command for Java fails with javalib incompability,Because of the version difference between Java runtime and Java compiler.,Update/Fix in source code,Apparently the bug is fixed by explicitly specifying the system language.
36,Static Analysis Tasks,Call Graph,https://github.com/soot-oss/SootUp/issues/1000,Feature request for serializing call graphs.,N/A,No fix,Accepted to feature backlog.
37,Static Analysis Tasks,Call Graph,https://github.com/soot-oss/soot/issues/566,Call graphs built with SPARK does not contain some of the expected edges.,N/A,Invalid issue,Clarification about reflection support. By default reflection is not supported that's why some edges were missing.
38,Static Analysis Tasks,Call Graph,https://github.com/soot-oss/soot/issues/2080,Incorrect topological sorting leads to incorrect SCC computation in SPARK.,Implementation bug.,Update/Fix in source code,The user found the commit that introduced the bug and solved themselves.
39,Static Analysis Tasks,Call Graph,https://github.com/soot-oss/soot/issues/2063,Incorrect edge present in the call graph.,N/A,Unknown,N/A
40,Static Analysis Tasks,Call Graph,https://github.com/soot-oss/SootUp/issues/1298,Feature request for filtering call targets from the call graph,N/A,No fix,Accepted to feature backlog.
41,Static Analysis Tasks,Class Loading,https://github.com/phpstan/phpstan/issues/3032,Question about specifiying folders for autoload.,N/A,Invalid issue,Clarification about how to specify folders to autoload and how the autoload mechanism works.
42,Static Analysis Tasks,Class Loading,https://github.com/soot-oss/soot/issues/1289,Question about loading all the jars in a folder,N/A,No fix,Explanation on the missing feature and suggesting user to contribute the feature.
43,Static Analysis Tasks,Class Loading,https://github.com/soot-oss/soot/issues/649,Could not load a specific class file form Java runtime.,N/A,Update/Fix in source code,No specific explanation was provided. The user reported that the bug is fixed with the next version.
44,Static Analysis Tasks,Class Loading,https://github.com/soot-oss/soot/issues/1348,Target class not found.,N/A,Invalid issue,The user didn't properly configure the classpath.
45,Static Analysis Tasks,Class Loading,https://github.com/phpstan/phpstan/issues/35,Question about anaylzing WordPress with Phpstan.,N/A,No fix,Phpstan does not fully support WordPress-specific features.
46,Tool Capabilities,Missing Results,https://github.com/pmd/pmd/issues/4457,Equals and hashcode check rule does not work for anonymous classes.,"When using the annotation @EqualsAndHashCode from lombok, corresponding rule does not work.",Update/Fix in source code,The issue is resolved with a new feature.
47,Tool Capabilities,Missing Results,https://github.com/spotbugs/spotbugs/issues/1764,String equality comparison check rule does not work as expected.,The rule ES_COMPARING_STRINGS_WITH_EQ does not work for the provided case.,Update/Fix in source code,The issue is resolved with a bug fix.
48,Tool Capabilities,Missing Results,https://github.com/spotbugs/spotbugs/issues/1501,The rule for detecting new line character in string format does not work as expected.,The rule VA_FORMAT_STRING_USES_NEWLINE does not work for the provided case.,Unknown,Discussion (Maintainers not involved)
49,Tool Capabilities,Missing Results,https://github.com/phpstan/phpstan/issues/4710,Feature request to support catching the uses of $$this,N/A,No fix,Suggestion on how to implement support for this.
50,Tool Capabilities,Missing Results,https://github.com/spotbugs/spotbugs/issues/873,Feature request for not breaking the build when there are issues,N/A,Existing solution,Suggestion about an existing feature to handle the issue
51,Language Features,Inheritance,https://github.com/phpstan/phpstan/issues/6264,Changing access modifier of a trait (interface) method causes unexpected errors.,Access modifier change leaks into other uses of the trait.,Update/Fix in source code,Root cause was identified and fixed
52,Language Features,Inheritance,https://github.com/phpstan/phpstan/issues/3221,A warning is raised for a trait method despite not being used in the implementer class.,N/A,Invalid issue,A clarification on the expected behaviour is provided.
53,Language Features,Inheritance,https://github.com/wala/WALA/issues/219,The method for getting all the classes ignores default methods.,Missing case: Default methods were not considered in implementation,Update/Fix in source code,The user implemented the bug fix themselves.
54,Language Features,Inheritance,https://github.com/soot-oss/soot/issues/1831,Inner class always returns false for the isStatic method,N/A,Unknown,N/A
55,Language Features,Inheritance,https://github.com/phpstan/phpstan/issues/2160,Unexpected error when parent class contains private constructor,"Missing case: It is a rare usage, so this case was not handled before.",Update/Fix in source code,"A brief discussion on understanding the usa case, followed by the fix."
56,Static Analysis Tasks,Taint Analysis,https://github.com/facebook/infer/issues/1356,Question about performing taint analysis,N/A,Unknown,N/A
57,Static Analysis Tasks,Taint Analysis,https://github.com/secure-software-engineering/FlowDroid/issues/766,Question about missing taint flows.,N/A,No fix,Suggestion to use a debug option to obtain more information about the taint flows.
58,Static Analysis Tasks,Taint Analysis,https://github.com/secure-software-engineering/FlowDroid/issues/799,Missing taint flows when using lists,An option probably causes the tool to ignore aliases.,No fix,Clarification about how the provided options might cause this behaviour.
59,Static Analysis Tasks,Taint Analysis,https://bitbucket.org/yanniss/doop-deprecated/issues/34/p-taint-about-array,Expected taint flow does not occur when analyzing sprint boot project.,N/A,Unknown,N/A
60,Static Analysis Tasks,Taint Analysis,https://github.com/pmd/pmd/issues/5271,False positive caused by method visibility.,The user misunderstood the analysis rule.,Invalid issue,Clarification about the rule (UnusedPrivateMethod). The tool is actually doing what it supposed to do.